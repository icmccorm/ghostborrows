error[E0596]: cannot borrow `activated` as mutable, as it is not declared as mutable
 --> tests/ui/fail/prevent_foreign_write.rs:7:14
  |
5 |         let activated = r1.activate(token1);
  |             --------- help: consider changing this to be mutable: `mut activated`
6 |         activated.borrow_mut(|_, _| {
7 |             *activated.as_mut() = 2;
  |              ^^^^^^^^^ cannot borrow as mutable

error[E0382]: borrow of moved value: `activated`
 --> tests/ui/fail/prevent_foreign_write.rs:6:30
  |
5 |           let activated = r1.activate(token1);
  |               --------- move occurs because `activated` has type `ghostborrows::RefMut<'_, i32>`, which does not implement the `Copy` trait
6 |           activated.borrow_mut(|_, _| {
  |                     -          ^^^^^^ value borrowed here after move
  |  ___________________|
  | |
7 | |             *activated.as_mut() = 2;
  | |              --------- borrow occurs due to use in closure
8 | |         });
  | |__________- `activated` moved due to this method call
  |
note: `ghostborrows::RefMut::<'tag, T>::borrow_mut` takes ownership of the receiver `self`, which moves `activated`
 --> src/refs.rs
  |
  |         self,
  |         ^^^^
